name: CI

on:
  push:
    branches: [master, staging, trying]
  pull_request:
    branches: [master]

env:
  CARGO_TERM_COLOR: always

jobs:
  check:
    name: check
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust:
          - 1.68.0
    # required because we have a different toolchain than {{ matrix.rust }} in
    # rust-toolchain.toml, which we use for the flake.nix
    env:
      RUSTUP_TOOLCHAIN: ${{ matrix.rust }}
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
      - name: Install toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
      - uses: swatinem/rust-cache@v2
      - name: cargo-check
        run: cargo check --all --all-features

  test:
    name: test
    needs: check
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust:
          - 1.68.0
    # required because we have a different toolchain than {{ matrix.rust }} in
    # rust-toolchain.toml, which we use for the flake.nix
    env:
      RUSTUP_TOOLCHAIN: ${{ matrix.rust }}
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
      - name: Install toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
      - uses: swatinem/rust-cache@v2
      - name: cargo-test
        run: cargo test --all --all-features

  nix-build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: cachix/install-nix-action@v22
      with:
        nix_path: nixpkgs=channel:nixos-unstable
    - uses: cachix/cachix-action@v13
      with:
        name: vunk-lang
        # If you chose API tokens for write access OR if you have a private cache
        authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
    - run: nix --extra-experimental-features "nix-command flakes" flake check

  nix-shell:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: cachix/install-nix-action@v22
      with:
        nix_path: nixpkgs=channel:nixos-unstable
    - uses: cachix/cachix-action@v13
      with:
        name: vunk-lang
        # If you chose API tokens for write access OR if you have a private cache
        authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
    - run: nix --extra-experimental-features "nix-command flakes" develop -c echo shell built

  fmt:
    name: format
    needs: check
    runs-on: ubuntu-latest
    # required because we have a different toolchain than {{ matrix.rust }} in
    # rust-toolchain.toml, which we use for the flake.nix
    env:
      RUSTUP_TOOLCHAIN: 1.68.0
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: 1.68.0
          components: rustfmt
      - run: rustup component add rustfmt
      - name: cargo-fmt
        run: cargo fmt -- --check

  clippy:
    name: clippy
    needs: check
    runs-on: ubuntu-latest
    # required because we have a different toolchain than {{ matrix.rust }} in
    # rust-toolchain.toml, which we use for the flake.nix
    env:
      RUSTUP_TOOLCHAIN: 1.68.0
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: 1.68.0
          components: clippy
      - uses: swatinem/rust-cache@v2
      - name: cargo-clippy
        run: cargo clippy --all --all-targets --all-features

  license:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Check License Lines
        uses: kt3k/license_checker@v1.0.6

  # We need some "accummulation" job here because bors fails (timeouts) to
  # listen on matrix builds.
  # Hence, we have some kind of dummy here that bors can listen on
  ci-success:
    name: CI
    if: ${{ success() }}
    needs:
      - check
      - test
      - nix-build
      - nix-shell
      - clippy
      - fmt
      - license
    runs-on: ubuntu-latest
    steps:
      - name: CI succeeded
        run: exit 0
